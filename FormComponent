import React from "react";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
} from "@/components/ui/card";
import FormFieldBlock from "./FormFieldBlock";
import CustomFormField from "./CustomFormField";

type FormComponentProps = {
  form: any; // Instance of `react-hook-form`
  fields: any[]; // Mixed array of standalone fields and grouped fields
  cardTitle: string;
  cardDescription: string;
};

const FormComponent: React.FC<FormComponentProps> = ({
  form,
  fields,
  cardTitle,
  cardDescription,
}) => {
  return (
    <Card className="w-full p-6 shadow-lg rounded-md">
      <CardHeader>
        <CardTitle>{cardTitle}</CardTitle>
        <CardDescription>{cardDescription}</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-6">
          {fields.map((field, index) =>
            field.fields ? (
              <FormFieldBlock
                key={index}
                title={field.title}
                description={field.description}
                fields={field.fields}
                form={form}
              />
            ) : (
              <CustomFormField
                key={field.name}
                {...field}
                formField={form.control.register(field.name)}
                setValue={form.setValue}
              />
            )
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default FormComponent;


//FormComponent.tsx avec FormFieldBlock

import React from 'react';
import { UseFormReturn } from "react-hook-form";
import { FormField, FormItem, FormLabel, FormControl, FormMessage } from "@/components/ui/form";
import FormFieldsBlock from './FormFieldsBlock';
import { FormFieldProps } from './FormComponent'; // Import FormFieldProps or define it here

type FormProps = {
  form: UseFormReturn<any>;
  fields: (FormFieldProps | FormFieldsBlockProps)[]; // Allow blocks and individual fields
  onSubmit: (data: any) => void;
};

const FormComponent: React.FC<FormProps> = ({ form, fields, onSubmit }) => {
  return (
    <form onSubmit={form.handleSubmit(onSubmit)} className="flex flex-col gap-4">
      {fields.map((field, index) =>
        "fields" in field ? (
          <FormFieldsBlock
            key={index}
            title={field.title}
            description={field.description}
            fields={field.fields}
            form={form}
          />
        ) : (
          <FormField
            key={field.name}
            control={form.control}
            name={field.name}
            render={({ field: formField }) => (
              <FormItem>
                <FormLabel>{field.label}</FormLabel>
                <FormControl>
                  {/* Render different field types here */}
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        )
      )}
      <button type="submit" className="mt-4 btn-primary">
        Submit
      </button>
    </form>
  );
};

export default FormComponent;


// components/FormComponent.tsx
import React from "react";
import { UseFormReturn } from "react-hook-form";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import NumberInputWithButtons from "./NumberInputWithButtons";
import TimeInputWithTimeZone from "./TimeInputWithTimeZone";
import { Input } from "@/components/ui/input";
import { Checkbox } from "@/components/ui/checkbox";

type FormFieldProps = {
  name: string;
  label: string;
  placeholder?: string;
  type: "text" | "select" | "number" | "checkbox" | "timeWithTimeZone" | "date";
  withButtons?: boolean;
  allowNegative?: boolean;
  options?: { value: string; label: string }[];
};

type FormProps = {
  form: UseFormReturn<any>;
  fields: FormFieldProps[];
};

const FormComponent: React.FC<FormProps> = ({ form, fields }) => {
  return (
    <div className="space-y-4">
      {fields.map((field) => (
        <FormField
          key={field.name}
          control={form.control}
          name={field.name}
          render={({ field: formField }) => (
            <FormItem>
              <FormLabel>{field.label}</FormLabel>
              <FormControl>
                {field.type === "text" && (
                  <Input placeholder={field.placeholder} {...formField} />
                )}
                {field.type === "number" && field.withButtons ? (
                  <NumberInputWithButtons
                    value={formField.value}
                    onChange={formField.onChange}
                    min={field.allowNegative ? undefined : 0}
                    step={1}
                    allowNegative={field.allowNegative}
                  />
                ) : field.type === "number" ? (
                  <Input
                    type="number"
                    placeholder={field.placeholder}
                    {...formField}
                  />
                ) : null}
                {field.type === "checkbox" && (
                  <Checkbox
                    checked={formField.value}
                    onCheckedChange={formField.onChange}
                  />
                )}
                {field.type === "timeWithTimeZone" && (
                  <TimeInputWithTimeZone
                    value={formField.value}
                    onChange={(time, timeZone) => {
                      form.setValue(`${field.name}_time`, time);
                      form.setValue(`${field.name}_timeZone`, timeZone);
                    }}
                  />
                )}
                {field.type === "date" && (
                  <Input
                    type="date"
                    placeholder={field.placeholder}
                    {...formField}
                  />
                )}
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
      ))}
    </div>
  );
};

export default FormComponent;